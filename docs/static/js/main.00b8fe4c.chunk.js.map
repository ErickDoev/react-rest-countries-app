{"version":3,"sources":["slices/countrySlice.js","components/CountryItem.jsx","components/CountriesList.jsx","components/CountryInput.jsx","components/CountriesScreen.jsx","components/Country.jsx","routes/AppRouter.jsx","store/store.js","CountriesApp.js","index.js"],"names":["getCountries","createAsyncThunk","sech","a","dispatch","fetch","response","json","data","dataFiltered","map","c","name","borders","nativeName","population","region","subregion","capital","topLevelDomain","currencies","languages","borderCountries","flag","id","numericCode","code","alpha3Code","getAllCountries","countrySlice","createSlice","initialState","countriesFiltered","active","loading","status","countryStatus","countriesByCode","reducers","state","action","payload","filterCountriesByName","console","log","filter","toLowerCase","includes","filterCountriesByRegion","setActiveCountry","setCountriesByCode","setActiveCountryByAlphaCode","e","extraReducers","pending","fulfilled","rejected","actions","filterCountries","CountryItem","useDispatch","to","replace","onClick","className","src","alt","CountriesList","countries","CountryInput","useSelector","country","useState","inputValue","setInputValue","placeholder","type","value","onChange","target","defaultValue","disabled","CountriesScreen","Country","l","AppRouter","useEffect","document","querySelector","classList","toggle","exact","path","component","store","configureStore","reducer","countryReducer","CountriesApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.00b8fe4c.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const getCountries = createAsyncThunk(\n    \"countries/getCountries\",\n    async (sech,{dispatch}) => {\n        const url = `https://restcountries.eu/rest/v2/all`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const dataFiltered = data.map(c => {\n            return{\n                name:c.name,\n                borders:c.borders,\n                nativeName:c.nativeName,\n                population:c.population,\n                region:c.region,\n                subregion:c.subregion,\n                capital:c.capital,\n                topLevelDomain:c.topLevelDomain,\n                currencies:c.currencies,\n                languages:c.languages,\n                borderCountries:c.borderCountries,\n                flag:c.flag, \n                id:c.numericCode,\n                code:c.alpha3Code\n            }\n        });\n        dispatch(getAllCountries(dataFiltered));\n        return dataFiltered;\n    }\n);\n\n// export const getCountryByName = createAsyncThunk(\n//     \"countries/getCountyByName\",\n//     async (name) => {\n//         const url = `https://restcountries.eu/rest/v2/name/${name}`;\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         const dataFiltered = data.map(c => {\n//             return{\n//                 name:c.name,\n//                 nativeName:c.nativeName,\n//                 population:c.population,\n//                 region:c.region,\n//                 subregion:c.subregion,\n//                 capital:c.capital,\n//                 topLevelDomain:c.topLevelDomain,\n//                 currencies:c.currencies,\n//                 languages:c.languages,\n//                 borderCountries:c.borders,\n//                 flag:c.flag, \n//                 id:c.numericCode,\n//                 code:c.alpha3Code\n//             }\n//         });\n//         return dataFiltered;\n//     }\n// )\n\n// export const getCountriesByCodes = createAsyncThunk(\n//     \"countries/getCountriesByCode\",\n//     async (codes,{dispatch}) => {\n//         const url = `https://restcountries.eu/rest/v2/alpha?codes=${codes};`;\n//         const resp = await fetch(url);\n//         const data = await resp.json();\n//         const dataFiltered = data.map(e => {\n//             return {\n//                 name:e.name,\n//                 alphacode:e.alpha3Code\n//             }\n//         })\n//         dispatch(setCountriesByCode(dataFiltered)); \n//         return dataFiltered;  \n//     }\n// )\n\nconst initialState = {\n    data:null,\n    countriesFiltered:null,\n    active:null,\n    loading:null,\n    status:null,\n    countryStatus:null,\n    countriesByCode: null\n}\nexport const countrySlice = createSlice({\n    name: 'country',\n    initialState,\n    reducers: {\n        getAllCountries:(state,action) => {\n            state.countriesFiltered=action.payload\n        },\n        filterCountriesByName: (state,action) => {\n            console.log(action.payload);\n            if(action.payload === ''){\n                state.countriesFiltered = state.data;\n            }else{\n                state.countriesFiltered = state.data.filter(c => c.name.toLowerCase().includes(action.payload.toLowerCase()));\n            }\n        },\n        filterCountriesByRegion: (state,action) => {\n            \n            if(action.payload.name === '' && action.payload.region === 'World'){\n                state.countriesFiltered = state.data;\n            }else{\n                state.countriesFiltered = state.data.filter(c => c.name.toLowerCase().includes(action.payload.name.toLowerCase()) && c.region === action.payload.region);\n            }\n        },\n        setActiveCountry: (state,action) => {\n            state.active=action.payload\n        },\n        setCountriesByCode:(state,action) => {\n            state.countriesByCode=action.payload\n        },\n        setActiveCountryByAlphaCode: (state,action) => {\n            state.active = state.data.filter(e => e.code === action.payload )\n        }\n        \n    },\n    extraReducers:{\n        [getCountries.pending]: (state) => {\n            state.loading = true\n            state.status = \"loading\"\n        },\n        [getCountries.fulfilled]: (state,action) => {\n            state.loading = false;\n            state.status = \"success\"\n            state.data = action.payload\n        },\n        [getCountries.rejected]: (state) => {\n            state.status = \"failed\"\n        },\n        // [getCountryByName.pending]: (state) => {\n        //     state.countryStatus = \"pending\"\n        // },\n        // [getCountryByName.fulfilled]: (state,action) => {\n        //     state.countryStatus = \"success\"\n        //     state.active = action.payload\n        // },\n        // [getCountryByName.rejected]: (state,action) => {\n        //     state.countryStatus = \"failed\"\n        // }\n    }\n});\n\nexport const {setActiveCountryByAlphaCode,setCountriesByCode,getAllCountries,filterCountries,filterCountriesByName,filterCountriesByRegion,setActiveCountry} = countrySlice.actions;\n\nexport default countrySlice.reducer;","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { setActiveCountry } from '../slices/countrySlice';\n\nexport const CountryItem = (\n    {   \n        id,\n        name,\n        borders,\n        nativeName,\n        population,\n        region,\n        subregion,\n        topLevelDomain,\n        capital,\n        currencies,\n        flag,\n        languages,\n        borderCountries\n    }\n    \n    ) => {\n\n    const dispatch = useDispatch();\n    const handleActiveCountry = () => {\n        dispatch(setActiveCountry({id,\n            name,\n            borders,\n            nativeName,\n            population,\n            region,\n            subregion,\n            topLevelDomain,\n            capital,\n            currencies,\n            flag,\n            languages,\n            borderCountries}));\n    }\n    return (\n\n        <Link \n            to={`./country/${name.replace(/\\s+/g, \"-\").toLowerCase()}`}\n            onClick={handleActiveCountry}>\n            <div className=\"card\">\n                <div className=\"card__img\">\n                    <img src={flag} alt={name}/>\n                </div>\n                <div className=\"card__content\">\n                    <div className=\"card__title\">\n                        <h3>{name}</h3>\n                    </div>\n                    <div className=\"card__body\">\n                        <p>Population: {population}</p>\n                        <p>Region: {region}</p>\n                        <p>Capital: {capital}</p>\n                    </div>\n                </div>\n            </div>\n        </Link>\n    )\n}\n","import React from 'react';\n\nimport { CountryItem } from './CountryItem';\n\nexport const CountriesList = ({countries}) => {\n\n    return (\n        <div className=\"card__list\">\n            {\n                countries && countries.map(c => ( \n                    <CountryItem \n                        key={c.id}\n                        borders={c.borders}\n                        id={c.id}\n                        name={c.name}\n                        nativeName={c.nativeName}\n                        population={c.population}\n                        subregion={c.subregion}\n                        topLevelDomain={c.topLevelDomain}\n                        currencies={c.currencies}\n                        languages={c.languages}\n                        borderCountries={c.borders}\n                        region={c.region}\n                        capital={c.capital}\n                        flag={c.flag}/>    \n                ))\n            }\n        </div>\n    )\n}\n","import React, {  useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterCountriesByName, filterCountriesByRegion } from '../slices/countrySlice';\nimport { CountriesList } from './CountriesList';\n\nexport const CountryInput = () => {\n\n    const {countriesFiltered} = useSelector(state => state.country);\n    const [inputValue, setInputValue] = useState({\n        name:'',\n        region:''\n    });\n    const {name} = inputValue;\n    const dispatch = useDispatch();\n\n    const handleInputChange = (e) => {\n            \n        setInputValue({\n            ...inputValue,\n            [e.target.name]:e.target.value,\n            \n        });   \n        \n        dispatch(filterCountriesByName(e.target.value));\n    }\n\n    const handleSelectChange = (e) => {\n\n        setInputValue({...inputValue})\n\n        dispatch(filterCountriesByRegion({region:e.target.value,name}));\n    }\n\n    return (\n        <div>\n            \n            <div className=\"input-main\">\n                <div className=\"input-content\">\n                    <i className=\"fas fa-search\"></i>\n                    <input \n                        placeholder=\"Search for a country...\"\n                        className=\"input\"\n                        type=\"text\"\n                        name=\"name\"\n                        value={name}\n                        onChange={handleInputChange}/>\n                </div>\n                \n                <select \n                    className=\"input-region\"\n                    name=\"region\" \n                    onChange={handleSelectChange}\n                    defaultValue='region'\n                    >\n                        <option value=\"region\" disabled>Filter by a Region</option>\n                        <option value=\"World\">World</option>\n                        <option value=\"Africa\">Africa</option>\n                        <option value=\"Americas\">America</option>\n                        <option value=\"Asia\">Asia</option>\n                        <option value=\"Europe\">Europe</option>\n                        <option value=\"Oceania\">Oceania</option>\n                </select>\n            </div>\n\n            <CountriesList \n                countries={countriesFiltered}/>   \n        </div>\n    )\n}\n","import React from 'react';\n\nimport { CountryInput } from './CountryInput';\n\nexport const CountriesScreen = () => {\n\n    \n\n    return (\n        <div className=\"main\">\n            <CountryInput />\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\n\nexport const Country = () => {\n    \n   \n    const {active} = useSelector(state => state.country);\n    // const handleBack = () => {\n    //     history.push('/countries');\n    // }\n    // useEffect(() => {\n    //     dispatch(getCountriesByCodes(active.borders.join(';')));\n        \n    // }, [active.borders,dispatch]);\n\n\n    // if(!active){\n    //     return <Redirect to='/countries'/>\n    // }\n\n    // const setCountryActive = (code) => {\n    //     dispatch(setActiveCountryByAlphaCode(code));\n    // }\n    //console.log(active.borderCountries);[{...}]\n    return (\n        <div className=\"country__main\">\n            <div>\n                <button \n                    className=\"country__button\"\n                    \n                    ><i className=\"fas fa-hand-point-left\"></i> Back</button>\n            </div>\n            <div className=\"country__content\">\n                <div className=\"country__flag\">\n                    <img src={active.flag} alt={active.name} />\n                </div>\n                <div className=\"country__info\">\n                    <div className=\"country__name\">\n                        <p>{active.name}</p>\n                    </div>\n                    <div className=\"country__general\">\n                        \n                        <div>\n                            <p><strong>Native name: </strong> {active.nativeName}</p>\n                            <p><strong>Population: </strong>{active.population}</p>\n                            <p><strong>Region: </strong>{active.region}</p>\n                            <p><strong>Subregion: </strong>{active.subregion}</p>\n                            <p><strong>Capital: </strong>{active.subregion}</p>\n                            \n                        </div>\n                        <div>\n                            <p><strong>Top Level Domain: </strong>{active.topLevelDomain}</p>\n                            <p><strong>Currencies: </strong>{active.currencies.map(c=>c.name)}</p>\n                            <p><strong>Languages: </strong>{active.languages.map(l=>l.name)}</p>  \n        \n                        </div>\n                    </div>\n                    {/* <div className=\"country__borders\">\n                        {countriesByCode?.map(e => {\n                            return <Link onClick={()=>{setCountryActive(e.alphacode)}} key={e.alphacode} to={`${e.name.replace(/\\s+/g, \"-\")}`}>{e.name}</Link>\n                        })} \n                    </div> */}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n  } from \"react-router-dom\";\nimport { CountriesScreen } from '../components/CountriesScreen';\nimport { Country } from '../components/Country';\nimport { getCountries } from '../slices/countrySlice';\n\nexport const AppRouter = () => {\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        \n        dispatch(getCountries());\n\n        \n    }, [dispatch]);\n\n    const handleChangeMode = () => {\n        document.querySelector('body').classList.toggle('dark');\n    }\n    return (\n        <div>\n            <Router>\n                <nav>\n                    <p>Where in the world?</p>\n                    <div onClick={handleChangeMode}>\n                        <span><i className=\"fas fa-moon\"></i> Dark Mode</span>\n                    </div>\n                </nav>\n\n                <Switch>\n                    <Route exact path='/countries' component={CountriesScreen}/>\n                    <Route exact path='/country/:id' component={Country}/>\n                    <Redirect to='/countries'/>\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport countryReducer from \"../slices/countrySlice\";\n\nexport const store = configureStore({\n    reducer:{\n        country: countryReducer\n    }\n});","import React from 'react'\nimport { AppRouter } from './routes/AppRouter'\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nexport const CountriesApp = () => {\n    return (\n        <Provider store={store}>\n            <AppRouter/>\n        </Provider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CountriesApp } from './CountriesApp';\nimport './styles/styles.scss';\n\nReactDOM.render(\n    <CountriesApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}